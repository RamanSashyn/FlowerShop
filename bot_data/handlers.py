from aiogram import types, Dispatcher, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot_data.keyboards import main_menu_kb
from bot_data.notifications import send_consultation_to_florist


class ConsultationStates(StatesGroup):
    waiting_for_phone = State()


async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üíê\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=main_menu_kb
    )

async def message_handler(message: types.Message, state: FSMContext):
    text = message.text

    if text == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç üìû")
        await state.set_state(ConsultationStates.waiting_for_phone)

    elif text == "üå∏ –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç –ø–æ–¥ –∂–µ–ª–∞–Ω–∏–µ":
        await message.answer("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–π –±—É–∫–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ üå∑")

    elif text == "üì∑ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é":
        await message.answer("–í–æ—Ç –Ω–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: [—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ñ–æ—Ç–æ] üì∏")

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é.")


async def phone_input_handler(message: types.Message, state: FSMContext, bot: Bot):
    user = message.from_user
    phone = message.text.strip()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "–§–ª–æ—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ üì∏"
    )

    await message.answer_photo(
        photo="https://images.app.goo.gl/UFR1SwyMezC35GrF6",  # –ø—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ
        caption="üíê –ë—É–∫–µ—Ç ¬´–ù–µ–∂–Ω–æ—Å—Ç—å¬ª ‚Äî 2000‚ÇΩ",
        reply_markup=main_menu_kb
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
    await send_consultation_to_florist(bot, user, phone)

    await state.clear()


def register_handlers(dp: Dispatcher):
    dp.message.register(phone_input_handler, ConsultationStates.waiting_for_phone)
    dp.message.register(start_handler, F.text == "/start")
    dp.message.register(message_handler, F.text)
