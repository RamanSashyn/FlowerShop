from datetime import datetime
from textwrap import dedent
import os

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from django.db.models import Q

from bot_admin.models import Bouquet, ConsultationRequest, Order
from bot_data.keyboards import (
    get_bouquet_keyboard,
    get_collection_keyboard,
    get_consultation_phone_keyboard,
    get_consultation_keyboard,
    get_order_phone_keyboard,
    get_preferred_option,
    get_price_keyboards,
    get_start_keyboard,
    get_theme_bouquet
)


router = Router()


class OrderStates(StatesGroup):
    GET_PHONE = State()
    GET_NAME = State()
    GET_ADDRESS = State()
    GET_DATE = State()
    GET_TIME = State()


async def start_handler(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üíê\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_start_keyboard()
    )


async def show_consultation_options(callback: types.CallbackQuery):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
    keyboard = get_preferred_option()
    if callback.message.text:
        await callback.message.edit_text(
            text=text,
            reply_markup=keyboard,
        )

    elif callback.message.caption:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=keyboard,
        )
    await callback.answer()


async def notify_manager(
        bot: Bot,
        user: types.User,
        contact_method: str,
        phone_number: str = None
):
    manager_chat_id = os.getenv("TG_CONSULTANT_CHAT_ID")
    if not manager_chat_id:
        print('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —á–∞—Ç-id –∫–æ–Ω—å—Å—É–ª—å—Ç–∞–Ω—Ç–∞.')
        return

    message_text = dedent(f"""\
        –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!
        –ò–º—è: {user.full_name}
        ID: {user.id}
        Username: @{user.username}
        –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {contact_method}
    """)

    if phone_number:
        message_text += f"\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}"

    await bot.send_message(
        chat_id=manager_chat_id,
        text=message_text,
        reply_markup=get_consultation_keyboard(user.id)
    )


async def handle_contact_preference(callback: types.CallbackQuery, bot: Bot):
    user = callback.from_user

    if callback.data == "in_chat":

        await ConsultationRequest.objects.acreate(
            full_name=user.full_name,
            telegram_username=user.username,
            phone_number="‚Äî —á–µ—Ä–µ–∑ —á–∞—Ç ‚Äî"
        )

        await notify_manager(bot, user, "üí¨ –ß–∞—Ç")
        await callback.message.answer(
            dedent("""\
            –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —á–∞—Ç–µ üí¨
            –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            """),
            reply_markup=get_collection_keyboard()
        )

    elif callback.data == "by_phone":
        await callback.message.answer(
            "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É ‚¨áÔ∏è",
            reply_markup=get_consultation_phone_keyboard()
        )

    await callback.answer()


async def get_phone(message: types.Message, bot: Bot, state: FSMContext):
    current_state = await state.get_state()
    if current_state == OrderStates.GET_PHONE.state:
        await process_phone(message, state, bot)
        return

    if message.contact:
        await ConsultationRequest.objects.acreate(
            full_name=message.from_user.full_name,
            telegram_username=message.from_user.username,
            phone_number=message.contact.phone_number,
        )
        await notify_manager(
            bot=bot,
            user=message.from_user,
            contact_method="üìû –¢–µ–ª–µ—Ñ–æ–Ω",
            phone_number=message.contact.phone_number
        )
        await message.answer(
            dedent("""\
            –°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É,
            –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç.
            –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏.
            """),
            reply_markup=get_collection_keyboard()
        )


async def show_bouquet_occasions(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –±—É–∫–µ—Ç–∞:",
        reply_markup=get_theme_bouquet()
    )
    await callback.answer()


async def handle_price(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    if parts[1] == 'no' and parts[2] == 'matter':
        price = 'no_matter'
        occasion = "_".join(parts[3:]) if len(parts) > 3 else None
    else:
        price = parts[1]
        occasion = "_".join(parts[2:]) if len(parts) > 2 else None
    await show_filtered_bouquets(callback, occasion=occasion, price=price)


async def view_collection(
        callback: types.CallbackQuery,
        occasion: str = None,
        price: str = None,
        start_index: int = 0
):
    await show_filtered_bouquets(callback, occasion, price, start_index)
    await callback.answer()


async def filter_bouquets(query, occasion, price):
    if occasion and occasion != 'occasion_custom':
        query = query.filter(
            Q(occasion=occasion) | Q(occasion="occasion_custom")
        )

    elif occasion == "occasion_custom":
        query = query.filter(occasion="occasion_custom")

    if price is not None and price != 'no_matter':
        if price == "500":
            query = query.filter(price__lte=500)
        elif price == "1000":
            query = query.filter(price__lte=1000)
        elif price == "2000":
            query = query.filter(price__lte=2000)
        elif price == "more":
            query = query.filter(price__gt=2000)

    return query


async def show_filtered_bouquets(
        callback: types.CallbackQuery,
        occasion: str = None,
        price: str = None,
        start_index: int = 0,
):
    query = Bouquet.objects.all()
    query = await filter_bouquets(query, occasion, price)

    bouquets = [b async for b in query]

    if not bouquets:
        await callback.message.answer(
            dedent("""\
                –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é.
                –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ –Ω–∞—à–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.
            """),
            reply_markup=get_start_keyboard()
        )
        return

    start_index = max(0, min(start_index, len(bouquets) - 1))
    current_bouquet = bouquets[start_index]

    caption = dedent(f"""
    <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {current_bouquet.name}
    <b>–°–æ—Å—Ç–∞–≤:</b> {current_bouquet.flowers}
    <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {current_bouquet.description}
    <b>–¶–µ–Ω–∞:</b> {current_bouquet.price} —Ä—É–±.

    <b>–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?
    –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏
    –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞.</b>
    """)

    image_url = types.FSInputFile(current_bouquet.image.path)

    await callback.message.answer_photo(
        photo=image_url,
        caption=caption,
        parse_mode=ParseMode.HTML,
        reply_markup=get_bouquet_keyboard(
            bouquet_id=current_bouquet.id,
            current_index=start_index + 1,
            total=len(bouquets),
            occasion=occasion,
            price=price
        )
    )
    await callback.answer()


async def navigate_bouquet_catalog(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    action = parts[0]
    current_index = int(parts[1])

    price = None
    occasion = None

    if len(parts) > 2:
        if parts[2] == 'no' and len(parts) > 3 and parts[3] == 'matter':
            price = 'no_matter'
            occasion = "_".join(parts[4:]) if len(parts) > 4 else None
        else:
            price = parts[2]
            occasion = "_".join(parts[3:]) if len(parts) > 3 else None

    query = Bouquet.objects.all()

    query = await filter_bouquets(query, occasion, price)

    bouquets = [b async for b in query]
    total = len(bouquets)

    current_position = current_index - 1

    if action == "prev":
        new_position = (current_position - 1) % total
    elif action == "next":
        new_position = (current_position + 1) % total

    await callback.message.delete()
    await show_filtered_bouquets(
        callback,
        occasion=occasion,
        price=price,
        start_index=new_position
    )
    await callback.answer()


async def get_price(callback: types.CallbackQuery):
    occasion = callback.data.replace("occasion_", "")
    await callback.message.edit_text(
        "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=get_price_keyboards(occasion=occasion)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("order_"))
async def start_order_process(
    callback: types.CallbackQuery,
    state: FSMContext
):
    bouquet_id = int(callback.data.split("_")[1])
    bouquet = await Bouquet.objects.aget(id=bouquet_id)
    await state.update_data(
        bouquet_id=bouquet.id,
        bouquet_name=bouquet.name
    )
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
    await state.set_state(OrderStates.GET_NAME)
    await callback.answer()


@router.message(OrderStates.GET_NAME)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(client_name=message.text)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.GET_ADDRESS)


@router.message(OrderStates.GET_ADDRESS)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(OrderStates.GET_DATE)


@router.message(OrderStates.GET_DATE)
async def process_date(message: types.Message, state: FSMContext):
    try:
        delivery_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        if delivery_date < datetime.now().date():
            await message.answer(
                "–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
            )
            return

        await state.update_data(delivery_date=delivery_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
        await state.set_state(OrderStates.GET_TIME)
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )


@router.message(OrderStates.GET_TIME)
async def process_time(message: types.Message, state: FSMContext):
    try:
        delivery_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(delivery_time=delivery_time)
        await message.answer(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–æ–º–µ—Ä–∞:",
            reply_markup=get_order_phone_keyboard()
        )
        await state.set_state(OrderStates.GET_PHONE)
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:"
        )


@router.message(OrderStates.GET_PHONE, F.contact)
async def process_phone(message: types.Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    bouquet = await Bouquet.objects.aget(id=data['bouquet_id'])
    order = await Order.objects.acreate(
        bouquet=bouquet,
        customer_name=data['client_name'],
        telegram_username=message.from_user.username,
        phone=message.contact.phone_number,
        address=data['address'],
        delivery_date=data['delivery_date'],
        delivery_time=data['delivery_time'],
        status="–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    )

    await send_order_confirmation(message, bouquet, data, order)
    await notify_courier_about_order(bot, bouquet, data, message, order)

    await state.clear()


async def send_order_confirmation(
    message: types.Message,
    bouquet: Bouquet,
    order_data: dict,
    order: Order
):
    confirmation_text = dedent(f"""\
        ‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!
        –ë—É–∫–µ—Ç: {bouquet.name}
        –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.
        –ò–º—è: {order_data['client_name']}
        –ê–¥—Ä–µ—Å: {order_data['address']}
        –î–∞—Ç–∞: {order_data['delivery_date'].strftime('%d.%m.%Y')}
        –í—Ä–µ–º—è: {order_data['delivery_time'].strftime('%H:%M')}
        –¢–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}
        –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.id}
    """)

    await message.answer(
        confirmation_text,
        reply_markup=types.ReplyKeyboardRemove()
    )


async def notify_courier_about_order(
    bot: Bot,
    bouquet: Bouquet,
    order_data: dict,
    message: types.Message,
    order: Order
):
    courier_chat_id = os.getenv("TG_COURIER_CHAT_ID")
    if not courier_chat_id:
        print('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —á–∞—Ç-id –∫—É—Ä—å–µ—Ä–∞.')
        return

    courier_message = dedent(f"""\
        –ù–û–í–´–ô –ó–ê–ö–ê–ó
        –ë—É–∫–µ—Ç: {bouquet.name}
        –¶–µ–Ω–∞: {bouquet.price} —Ä—É–±.
        –ö–ª–∏–µ–Ω—Ç: {order_data['client_name']} (@{message.from_user.username})
        –¢–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}
        –ê–¥—Ä–µ—Å: {order_data['address']}
        –î–∞—Ç–∞: {order_data['delivery_date'].strftime('%d.%m.%Y')}
        –í—Ä–µ–º—è: {order_data['delivery_time'].strftime('%H:%M')}
        –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.id}
    """)

    await bot.send_message(
        chat_id=courier_chat_id,
        text=courier_message
    )


def register_handlers(dp: Dispatcher):
    dp.message.register(start_handler, Command("start"))

    dp.callback_query.register(
        show_consultation_options, F.data == "consultation"
    )
    dp.message.register(get_phone, F.contact)
    dp.callback_query.register(handle_contact_preference, F.data.in_([
        "in_chat",
        "by_phone"
    ]))
    dp.callback_query.register(view_collection, F.data == "view_collection")
    dp.callback_query.register(
        show_bouquet_occasions, F.data == "order_bouquet"
    )
    dp.callback_query.register(get_price, F.data.startswith("occasion_"))
    dp.callback_query.register(handle_price, F.data.startswith("price_"))
    dp.callback_query.register(
        navigate_bouquet_catalog, F.data.startswith("next_")
    )
    dp.callback_query.register(
        navigate_bouquet_catalog, F.data.startswith("prev_")
    )
    dp.callback_query.register(
        start_order_process, F.data.startswith("order_"))